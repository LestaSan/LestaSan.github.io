{"title":"总结：JS基础面试知识--原型、原型链、构造函数","date":"2018-09-01T13:38:53.000Z","excerpt":"","slug":"js-interview-2","updated":"2018-09-01T14:23:20.109Z","content":"<ul>\n<li><p>如何准确判断一个变量是数组类型？</p>\n<pre><code>不能使用typeof，用instanceof\nvar arr = []\narr instanceof Array   // true\ntypeof arr             // object  \n</code></pre></li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>写一个原型链继承基础例子。</p>\n<pre><code>// 动物\nfunction Animal() {\n  this.eat =  function() {\n    console.log(&apos;animal eat&apos;);\n  }\n}\n// 狗\nfunction Dog() {\n  this.bark = function() {\n    console.log(&apos;dog bark&apos;);\n  }\n}\nDog.prototype = new Animal()\n// 哈士奇\nvar hashiqi = new Dog()\n</code></pre></li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>描述new一个对象的过程。</p>\n<pre><code>创建一个新对象；\nthis指向这个新对象；\n执行代码，即对this赋值；\n返回this；\n</code></pre></li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>构造函数：</p>\n<pre><code>function Foo(name, age) {\n  this.name = name;\n  this.age = age;\n  this.class = &apos;class-1&apos;;\n  // return this //默认有这一行\n}\n</code></pre></li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>构造函数-扩展</p>\n<pre><code>var a = {} 其实是var = new Object() 的语法糖\nvar a = []其实是var a = new Array()的语法糖\nfunction Foo(){...} 其实是var Foo = new Function(...)\n使用instanof(引用类型)判断一个函数是否是一个变量的构造函数\n</code></pre></li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>原型规则和示例<br><br>5条原型规则</p>\n<pre><code>1.所有的引用类型（数组、对象、函数），\n都具有对象的特性，即可自由扩展属性（除了“null”意外）;\n2.所有的引用类型（数组、对象、函数），\n都有一个__proto__（隐式原型）属性，属性值是一个普通对象;\n3.所有的函数，都有一个prototype（显示）属性，\n属性值也是一个普通对象;\n4.所有的引用类型（数组、对象、函数），\n__proto__属性值指向它的构造函数的“prototype”属性值;\n5.当试图得到一个对象的某个属性时，\n如果这个对象本身没有这个属性，那么会去他的__proto__(即他的构造函数prototype)中寻找.\n\n`var obj = {}; obj.a = 100;\nvar arr = []; arr.a = 100;\nfunction fn () {}\nfn.a = 100;\n\nconsole.log(obj.__proto__)    // {}\nconsole.log(arr.__proto__)    // []\nconsole.log(fn.__proto__)     // function\n\nconsole.log(fn.prototype)     // fn() {}\nconsole.log(arr.prototype)    // undefined`\n</code></pre><p>  示例：</p>\n<pre><code>function Foo(name, age) {\n  this.name = name\n}\nFoo.prototype.alertName = function() {\n  alert(this.name)\n}\n// 创建示例\nvar f = new Foo(&apos;zhangsan&apos;)\nconsole.log(f)                // Foo { name: &apos;zhangsan&apos; }\nf.printName = function() {\n  console.log(this.name)\n}\n// 测试\nf.printName()\nf.alertName()\nf.toString()  // 要去f.__proto__.proto__查找\n\nconsole.log(f.__proto__ === Foo.prototype)    // true\n\nvar item \nfor(item in f) {\n  if(f.hasOwnProperty(item)) {\n    console.log(item)            // name, printName\n  }\n}\n</code></pre></li>\n</ul>\n<h4 id=\"其实我觉得廖雪峰老师讲的原型链这块超级好\"><a href=\"#其实我觉得廖雪峰老师讲的原型链这块超级好\" class=\"headerlink\" title=\"其实我觉得廖雪峰老师讲的原型链这块超级好\"></a>其实我觉得廖雪峰老师讲的<a href=\"https://www.liaoxuefeng.com/wiki/001434446689867b27157e896e74d51a89c25cc8b43bdb3000/0014344997235247b53be560ab041a7b10360a567422a78000\" target=\"_blank\" rel=\"noopener\">原型链</a>这块超级好</h4>","prev":{"title":"总结：数组去重的几种方法","slug":"Array-delre"},"next":{"title":"总结：JS基础面试知识--几个简单基础问题","slug":"js-interview-1"},"link":"/2018/09/01"}