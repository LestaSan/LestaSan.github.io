{"title":"总结：JS基础面试知识--几个简单基础问题","date":"2018-08-31T08:12:34.000Z","excerpt":"","slug":"js-interview-1","updated":"2018-08-31T08:49:35.102Z","content":"<p>最近要准备面试啦（慌）<br><br><br>所以看了点js基础面试知识，做一些总结来提醒自己。<br><br><br></p>\n<ul>\n<li><p>强制类型转换</p>\n<p>  字符串拼接<br></p>\n<pre><code>var a = 100 + 10    // 110\nvar b = 100 + &apos;10&apos;  // &apos;10010&apos;\n</code></pre><p>  == 运算符<br></p>\n<pre><code>100 == &apos;100&apos;  // true  转换成字符串\n0 == &apos;&apos;  //true  都会转换成false\nnull == undefined  //true\n</code></pre><p>  if语句   –&gt; 强制转换成Boolean类型<br></p>\n<pre><code>var a = true\nif(a) {};\nvar b = 100\nif(b) {};\nvar c = &apos;&apos;\nif(c) {}\n</code></pre><p>  逻辑运算<br></p>\n<pre><code>console.log(10 &amp;&amp; 0)  // 0\nconsole.log(&apos;&apos; || &apos;abc&apos;)  //&apos;abc&apos;\nconsole.log(!window.abc)  //true\n</code></pre></li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>js变量按照存储方式区分为哪些类型？ 并描述其特点。</p>\n<p>  按照存储方式的话，有值类型和引用类型。<br>  两者区别：</p>\n<pre><code>值类型赋值是变量的拷贝\n  var a = 100;\n  var b = a;      // 100\n  b = 200;\n  console.log(a) // 100 \n引用类型赋值是变量指针指向相同位置，会相互干预\n  var a = {age: 20}\n  var b = a\n  b.age = 21\n  console.log(a.age)  // 21\n</code></pre><p>  上述中，值类型是赋值, a给了100, b也给了100, b改变后不影响a；<br><br>  而引用类型中a是一个对象，a通过指针指向这个对象存在位置；<br><br>  当执行var b = a后b也指向这个对象；<br><br>  执行b.age = 21后这个对象改变了，那么a.age自然改变了 <br><br>  即：引用类型的变量是作为真实对象的指针，<br><br>  这样做的好处是节省空间（毕竟引用类型可以包含多条属性）</p>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>JS中使用 typeof 能得到的那些类型？</p>\n<p>  6种。number、string、boolean、undefined 、object、function<br><br>  其中前四种是值类型，可以用typeof区分；<br><br>  后面的两种是引用类型，无法用typeof区分；<br><br>  同时还有一个：typeof NaN  // number  注意一下<br><br>  例子：<br></p>\n<pre><code>typeof undefined   //undefined\ntypeof &apos;abc&apos;  //string\ntypeof 123  //number\ntypeof true  //boolean\n\ntypeof {}  //object\ntypeof []   //object\ntypeof null //object\ntypeof console.log  // function\n</code></pre></li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>JS有哪些内置函数？   — 数据封装对象</p>\n<p>  Object、Array、Boolean、Number、String、Function、Date、RegExp、Error</p>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>何时使用 === 何时使用 == ？ 为什么？</p>\n<p>  = = 会进行强制类型转换<br></p>\n<pre><code>if(obj.a == null) {\n  // 这里相当于obj.a === null || abj.a === undefined\n}\n</code></pre><p>  其他情况用===</p>\n</li>\n</ul>\n<p><br></p>\n<ul>\n<li><p>如何理解JSON？</p>\n<p>  它是一种数据格式，也可以看做是JS对象；<br><br>  它的api只有两个：<br><br>  JSON.stringfy({a:10, b:20})，将一个JavaScript值(对象或者数组)转换为一个JSON字符串<br><br>  JSON.parse(‘{“a”:10,”b”:20}’)，可用于拷贝数据</p>\n</li>\n</ul>\n","next":{"title":"实战：React全家桶仿PC端《快看漫画》(部分)","slug":"react-kuaikanCartoon"},"link":"/2018/08/31"}